/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaclient;

import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author Simba
 */
public class ClientPanel extends javax.swing.JFrame
{

    /**
     * Creates new form ClientPanel
     */
    Socket sock=null;
    String hostName="192.168.1.200";
    BufferedReader br;
    PrintWriter pw;
    int portNumber=50000;
    String userName="";
    String passWord="";
    Thread t;
    
    public ClientPanel()
    {
        initComponents();
        getUserName();
        t = new Thread(new ConnToServer());
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        usersBox = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Send message");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Send to>");

        jButton2.setText("Reconnect");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(usersBox, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(usersBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        pw.println(userName);
        pw.println(usersBox.getSelectedItem().toString());
        pw.println(jTextField1.getText());
        jTextField1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        if(!t.isAlive())
        {
            getUserName();
            t = new Thread(new ConnToServer());
            t.start();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ClientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ClientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ClientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ClientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ClientPanel().setVisible(true);
            }
        });
    }

    private class ServerReader implements Runnable
    {

        public ServerReader()
        {
        }

        @Override
        public void run()
        {
            
                try
                {
                    String line=null;
                    while((line=br.readLine())!=null)
                    {
                        jTextArea1.append(line+"\n");
                    }
                } 
                catch (IOException ex)
                {
                    Logger.getLogger(ClientPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            
        }
    }

    private class ConnToServer implements Runnable
    {

        public ConnToServer()
        {
        }

        @Override
        public void run()
        {
            sock = new Socket();
            try
            {
                sock.connect(new InetSocketAddress(hostName,portNumber),1000);
                br = new BufferedReader(new InputStreamReader(sock.getInputStream()));
                pw = new PrintWriter(sock.getOutputStream(),true);
                pw.println(userName);    // replace with username and pass from GUI
                pw.println(passWord);
                int respCode = Integer.parseInt(br.readLine());
                if(respCode==1)
                {
                    jTextArea1.append("Good data.\n");
                    readUsers();
                    readOldMessages();
                    Thread tx = new Thread(new ServerReader());
                    tx.start();
                }
                else if(respCode==2)
                {
                    jTextArea1.append("Something went wrong.\n");
                }
                
            } 
            catch (IOException ex)
            {
                showText("Connection to server not possible.");
                //Logger.getLogger(ClientPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }

        private void readUsers()
        {
            try
            {
                usersBox.addItem("ALL");
                int numUsers = Integer.parseInt(br.readLine());
                if(numUsers==0)
                    jTextArea1.append("No users in database.\n");
                for(int i=1;i<=numUsers;i++)
                {
                    //jTextArea1.append(br.readLine()+"\n");
                    usersBox.addItem(br.readLine());
                }
            } 
            catch (IOException ex)
            {
                Logger.getLogger(ClientPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private void readOldMessages()
        {
            try
            {
                int numUsers = Integer.parseInt(br.readLine());
                if(numUsers==0)
                    jTextArea1.append("No old messages.\n");
                for(int i=1;i<=numUsers;i++)
                {
                    jTextArea1.append(br.readLine()+"\n");
                }
            } 
            catch (IOException ex)
            {
                Logger.getLogger(ClientPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void getUserName() 
    {
        JTextField user=new JTextField(10);
        JTextField pass=new JTextField(10);
        
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel,BoxLayout.PAGE_AXIS));
        panel.add(user);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(pass);
        
        // promts user for username on program start
        while(true)
        {
            //int res = JOptionPane.showInputDialog(this,"Enter username, at least 5 characters");
            int res = JOptionPane.showConfirmDialog(this,panel,"Enter your username and password.",1);
            if(res==JOptionPane.OK_OPTION)
            {
                userName= user.getText();
                passWord = pass.getText();
                if(userName.length()<5 || passWord.length()<5)
                    showText("Username and password each must be at least 5 characters long!");
                else
                {
                    break;                    
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Closing...");
                dispatchEvent(new WindowEvent(this,WindowEvent.WINDOW_CLOSED));
            }
                
        }
    }
    
    private void showText(String string)        // shorter version of ...showMessageDialog...
    {
        JOptionPane.showMessageDialog(this, string);
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> usersBox;
    // End of variables declaration//GEN-END:variables
}
